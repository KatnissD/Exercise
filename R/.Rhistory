setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
list.files(getwd())
#list.files(getwd())
dir.create("every_tissue")
tis = read.table("rna_consensus.txt", header = T, sep = '\t',quote = "")
View(tis)
class(tis)
# learning aggregate()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- chickwts
View(df)
group_mean <- aggregate(weight ~ feed, data = df, mean) # Equivalent
group_mean
# FUN, count
group_count <- aggregate(df$feed, by = list(df$feed), FUN = length)
group_count
# FUN, quantile
# a time series object of class xts
# Sample xts object
set.seed(1)
Dates <- seq(dmy("01/01/2020"), dmy("01/01/2021"), by = "day")
# FUN, quantile
# a time series object of class xts
# Sample xts object
library(lubridate)
Dates <- seq(dmy("01/01/2020"), dmy("01/01/2021"), by = "day")
Return <- rnorm(length(Dates))
tserie <- xts(Return, Dates)
library(xts)
library(xts)
install.packages("xts")
library(xts)
tserie <- xts(Return, Dates)
head(tserie)
dat <- aggregate(tserie ~ month(index(tserie)), FUN = quantile,
probs = c(0.05, 0.95))
colnames(dat)[1] <- "Month"
dat
# ==================================================================
# Aggregate by multiple columns
# ==================================================================
set.seed(1)
cat_var <- sample(c("A","B","C"), nrow(df),replace = TRUE)
df2 <- cbind(df, cat_var)
head(df2)
aggregate(df2$weight, by = list(df2$feed, df2$cat_var), FUN = sum)
# several categorical variables
set.seed(1)
num_var <- rnorm(nrow(df))
df3 <- cbind(num_var, df)
head(df3)
# two or more numerical variables, we can use cbind()
aggregate(cbind(df3$num_var, df3$weight),list(df3$feed),mean)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
a <- c(x = 3, y = 5, x = 1, x = 4, y = 3)
a
split(a, f = names(a))
# character vector
groups <- c("Group 1", "Group 1", "Group 2", "Group 1", "Group 2")
split(a, f = groups)
split(a, f = factor(groups)) # Equivalent
# by multiple groups
groups2 <- c("Type 1", "Type 1", "Type 1", "Type 2", "Type 1")
split(a, f = list(groups, groups2))
# Equivalent
f1 <- factor(c("Group 1", "Group 1", "Group 2", "Group 1", "Group 2"),
levels = c("Group 1", "Group 2"))
f2 <- factor(c("Type 1", "Type 1", "Type 1", "Type 2", "Type 1"),
levels = c("Type 1", "Type 2"))
split(a, f = list(f1, f2))
# group interactions are separated with customization
vec_split <- split(a, f = list(f1, f2), drop = TRUE, sep = ": ")
vec_split
# =====================================================================
# Split data frame
# =====================================================================
set.seed(3)
# =====================================================================
# Split data frame
# =====================================================================
set.seed(3)
df <- CO2[sample(1:nrow(CO2), 10), ]
head(df)
# for treatment group
split(df, f = df$Treatment)
# for type and treatment groups
dfs <- split(df, f = list(df$Type, df$Treatment))
dfs
# recover the original data frame
unsplit(dfs, f = list(df$Type, df$Treatment))
# iterate over a list
a <- list(A = c(8, 9, 7, 5),
B = data.frame(x = 1:5, y = c(5, 1, 0, 2, 3)))
a
# apply the function sum
lapply(a, sum)
# =======================================================================
# Iterate over a vector
# =======================================================================
# calculate the square root of each element
b <- c(12, 18, 6)
lapply(b, sqrt)
# lapply with multiple arguments
c <- list(A = c(56, 12, 57, 24), B = c(89, 12, 64, 18, 65, 76))
lapply(c,                           # List
quantile,                    # Applied function
probs = c(0.25, 0.5, 0.75))  # Additional argument of the quantile function
# =======================================================================
# lapply with a custom function
# =======================================================================
d <- 1:3
# function to calculate the second power
fun <- function(x){
x^2
}
# applying our own function
lapply(d, fun)
# ========================================================================
# lapply vs for loop
# ========================================================================
# Empty list with 5 elements
x <- vector("list", 5)
View(x)
vec <- 1:5
for(i in vec){
if(i %% 2 == 0){ # check if the element 'i' is even or odd
x[[i]] = i ^ 3
} else {
x[[i]] = i ^ 4
}
}
x
for(i in vec){
if(i %% 2 == 0){ # check if the element 'i' is even or odd
x[i] = i ^ 3
} else {
x[[i]] = i ^ 4
}
}
x
# ------------------------- lapply ----------------------------------------
fun <- function(vec){
if(i %% 2 == 0){
i ^ 3
} else {
i ^ 4
}
}
lapply(vec, fun)
# ========================================================================
# lapply vs for loop
# ========================================================================
# -------------------------- for loop ------------------------------------
# Empty list with 5 elements
x <- vector("list", 5)
vec <- 1:5
# ------------------------- lapply ----------------------------------------
fun <- function(vec){
if(i %% 2 == 0){
i ^ 3
} else {
i ^ 4
}
}
lapply(vec, fun)
# ------------------------- lapply ----------------------------------------
vec <- 1:5
fun <- function(vec){
if(i %% 2 == 0){
i ^ 3
} else {
i ^ 4
}
}
lapply(vec, fun)
fun <- function(vec) {
if(i %% 2 == 0) {
i ^ 3
} else {
i ^ 4
}
}
lapply(vec, fun)
fun <- function(vec) {
if(i %% 2 == 0) {
i ^ 3
} else {
i ^ 4
}
}
lapply(vec, fun)
# ------------------------- lapply ----------------------------------------
vec <- 1:5
fun <- function(vec) {
if(i %% 2 == 0) {
i ^ 3
} else {
i ^ 4
}
}
lapply(vec, fun)
# ------------------------- lapply ----------------------------------------
vec <- 1:5
fun <- function(i){
if(i %% 2 == 0){
i ^ 3
} else {
i ^ 4i
}
}
lapply(vec, fun)
# ------------------------- lapply ----------------------------------------
vec <- 1:5
fun <- function(i){
if(i %% 2 == 0){
i ^ 3
} else {
i ^ 4
}
}
lapply(vec, fun)
# ===========================================================================
# lapply vs sapply
# ===========================================================================
# The main difference between the functions is that lapply returns a list instead of an array.
# However, if you set simplify = FALSE to the sapply function both will return a list.
lapply(c(4, 9, 16), FUN = sqrt)
sapply(c(4, 9, 16), FUN = sqrt)
# However, if you set simplify = FALSE to the sapply function both will return a list.
sapply(c(4, 9, 16), FUN = sqrt, simplify = FALSE)
# return a vector with the lapply function using the unlist or simplify2array
unlist(lapply(c(4, 9, 16), sqrt))
simplify2array(lapply(c(4, 9, 16), sqrt)) # Equivalent
# ================================================
# on certain columns
# ================================================
# for all columns
df <- data.frame(x = c(6,2), y = c(3,6), z = c(2,3))
lapply(1:ncol(df), function(i) df[,i] * i)
# ================================================
# on certain columns
# ================================================
# for all columns
df <- data.frame(x = c(6,2), y = c(3,6), z = c(2,3))
View(df)
# for certain columns
# Function applied to the first and third columns
lapply(c(1, 3), function(i) df[, i] * i)
# ================================================
# Nested lapply function
# =================================================
df <- data.frame(x = c(6,2), y = c(3,6))
# Empty list
res <- vector("list", 2)
for(i in 1:ncol(df)){
for (j in 1:nrow(df)){
res[[j]][i] <- df[j.i] * 4
}
}
for(i in 1:ncol(df)){
for (j in 1:nrow(df)){
res[[j]][i] <- df[j,i] * 4
}
}
res
unlist(lapply(1:nrow(df), function(j) {
df[j, i] * 4
}))
# -------------------- nested lapply
lapply(1:ncol(df), function(i) {
unlist(lapply(1:nrow(df), function(j) {
df[j, i] * 4
}))
})
